
@model IEnumerable<TrashCollector.Models.CollectorPickupsViewModel>
@{
    ViewBag.Title = "CollectionList";
}
 
<h2>Today's Collection List</h2>


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Address)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Zip)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PhoneNumber)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Address)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.State)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Zip)
        </td>
    </tr>



}
</table>
﻿
<style>
    #map {
        height: 400px;
        width: 100%;
    }
</style>
<h3>Map</h3>
<div id="map"></div>
<h3>Route Summary</h3>
<div id="directions-panel"></div>
<br />
<div>@Html.ActionLink("Back to My Account", "Index")</div>



    <script>

        var customers = @Html.Raw(Json.Encode(Model));
        var waypoints = [];
        var markers = [];
        var contentArray = [];

        function initMap()
        {
            //Initialize map
            var WI = { lat: 43.079147, lng: -88.771030 };
            var infowindow = new google.maps.InfoWindow();
            var geocoder = new google.maps.Geocoder();
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: WI
            });
            //set up geocoder and directions
            for(var i = 0; i < customers.length; i++){
                address = customers[i].AddressString;
                waypoints.push(address);
                var contentString = '<div>' + '<strong>' + customers[i].FirstName + ' ' + customers[i].LastName + '</strong>' + '</div>' +
                                    '<div>' + customers[i].Address + '</div>' +
                                    '<div>' + customers[i].City + ',' + '</div>' +
                                    '<div>' + customers[i].State + ' ' + customers[i].Zip + '</div>' +
                '<div>' + 'Phone: ' + customers[i].PhoneNumber.replace(/(\d{3})(\d{3})(\d{4})/, "($1) $2-$3") + '</div>';
                contentArray.push(contentString);
                GeocodeAddress(geocoder, address, map, contentArray, infowindow, i);
            }
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer({
                suppressMarkers: true
            });
            directionsDisplay.setMap(map);
            calculateAndDisplayRoute(directionsService, directionsDisplay);
            //Marker for the company location
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(43.079147, -88.771030),
                map: map
            });
            var infowindow = new google.maps.InfoWindow({
                content: '<strong>Trash Collector Co., Johnson Creek, WI</strong>',
                position: new google.maps.LatLng(43.079147, -88.771030)
            })
            infowindow.open(map);
            //infowindow.setOptions
            //marker.addListener('mouseover', function() {
            //    infowindow.open(map, marker)
            //});
            //marker.addListener('mouseout', function() {
            //    infowindow.close()
            //});
        }
        function GeocodeAddress(geocoder, location, resultsMap, contentArray, infowindow, index) {
            geocoder.geocode( { 'address': location}, function(results, status) {
                //alert(status);
                if (status == google.maps.GeocoderStatus.OK) {
                    //alert(results[0].geometry.location);
                    CreateMarker(results[0].geometry.location,location[0]+"<br>"+location[1], resultsMap, contentArray, infowindow, index);
                }
                else
                {
                    alert("Problem with Geocode." + status);
                }
            }); 
        }
        function CreateMarker(latlng, content, resultsMap, contentArray, infowindow, index){
            var marker = new google.maps.Marker({
                position: latlng,
                map: resultsMap
            }); 
            google.maps.event.addListener(marker, 'mouseover', function() { 
                infowindow.setContent(contentArray[index]);
                infowindow.open(resultsMap, marker);
            });		
            google.maps.event.addListener(marker, 'mouseout', function() { 
                infowindow.close();
            });
        }
        function calculateAndDisplayRoute(directionsService, directionsDisplay){
            var waypointObject = [];
            for (var i = 0; i < waypoints.length; i++){
                waypointObject.push({
                    location: waypoints[i],
                    stopover: true
                });
            }
            directionsService.route({
                origin: new google.maps.LatLng(43.079147, -88.771030),
                destination: new google.maps.LatLng(43.079147, -88.771030),
                waypoints: waypointObject,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function(response, status) {
                if (status == 'OK') {
                    directionsDisplay.setDirections(response);
                    var route = response.routes[0];
                    var summaryPanel = document.getElementById('directions-panel');
                    summaryPanel.innterHTML = '';
                    for (var i = 0; i < route.legs.length; i++) {
                        var routeSegment = i + 1;
                        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                            '</b><br>';
                        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                        for(var j = 0; j < route.legs[i].steps.length; j++){
                            summaryPanel.innerHTML += route.legs[i].steps[j].instructions + '<br>'
                        }
                    }
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAmdfmzyup3YjSkO5vzKRZyEl_0VVqwxHA&callback=initMap">
    </script>


